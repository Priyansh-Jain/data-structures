#include <bits/stdc++.h>
using namespace std;

int parent[1000];
int dis[1000]={0};
bool visited[1000]={0};
vector<int>ar[1000];

//for finding level of tree of each node we can use this algo
// we also find shortest path and parent of each node
void ssp_bfs_graph(int src)
{
    queue<int>q;
    q.push(src);
    visited[src]=true;
    dis[src]=0;
    parent[src]=src;
    
    while(!q.empty())
    {
        int h = q.front();
        q.pop();
        
        for(int child:ar[h])
        {
            if(!visited[child])
            {
                q.push(child);
                visited[child]=true;
                dis[child]=dis[h]+1;
                parent[child]=h;
            }
        }
    }
}


int main()
{
    
    int edges,nodes,n,m;
    cin >> nodes >> edges;
    for(int i=0;i<edges;i++)
    {
        cin >> n >> m;
        ar[n].push_back(m);
        ar[m].push_back(n);
    }
    
    ssp_bfs_graph(1);
    
    for(int i=1;i<=nodes;i++)
    {
        cout << dis[i] << " ";
    }
    cout << endl;
    for(int i=1;i<=nodes;i++)
    {
        cout << parent[i] << " ";
    }
    cout << endl;
    
}
